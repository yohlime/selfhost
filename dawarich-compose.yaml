services:
  dawarich-redis:
    image: redis:7.4-alpine
    container_name: dawarich_redis
    command: redis-server
    networks:
      - yohnet
    volumes:
      - dawarich_shared:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  dawarich-db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: dawarich_db
    volumes:
      - ./dawarich/db:/var/lib/postgresql/data
      - ./dawarich/shared:/var/shared
      # - ./postgresql.conf:/etc/postgresql/postgresql.conf # Optional, uncomment if you want to use a custom config
    networks:
      - yohnet
    env_file:
      - .env
    environment:
      POSTGRES_DB: dawarich_development
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d dawarich_development"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf # Use custom config, uncomment if you want to use a custom config
  dawarich-app:
    image: freikin/dawarich:latest
    container_name: dawarich_app
    volumes:
      - ./dawarich/public:/var/app/public
      - ./dawarich/watched:/var/app/tmp/imports/watched
      - ./dawarich/storage:/var/app/storage
      - ./dawarich/db:/dawarich_db_data
    networks:
      - yohnet
    ports:
      - 3344:3000
      # - 9394:9394 # Prometheus exporter, uncomment if needed
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ["bin/rails", "server", "-p", "3000", "-b", "::"]
    restart: on-failure
    env_file:
      - .env
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich-redis:6379
      DATABASE_HOST: dawarich-db
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 60
      APPLICATION_HOSTS: "dawarich.home.yohli.me,localhost,127.0.0.1"
      TIME_ZONE: Asia/Manila
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'",
        ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich-db:
        condition: service_healthy
        restart: true
      dawarich-redis:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.50" # Limit CPU usage to 50% of one core
          memory: "4G" # Limit memory usage to 4GB
  dawarich-sidekiq:
    image: freikin/dawarich:latest
    container_name: dawarich_sidekiq
    volumes:
      - ./dawarich/public:/var/app/public
      - ./dawarich/watched:/var/app/tmp/imports/watched
      - ./dawarich/storage:/var/app/storage
    networks:
      - yohnet
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ["sidekiq"]
    restart: on-failure
    env_file:
      - .env
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://dawarich-redis:6379
      DATABASE_HOST: dawarich-db
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: dawarich_development
      APPLICATION_HOSTS: "dawarich.home.yohli.me,localhost,127.0.0.1"
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: dawarich-app
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f sidekiq"]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich-db:
        condition: service_healthy
        restart: true
      dawarich-redis:
        condition: service_healthy
        restart: true
      dawarich-app:
        condition: service_healthy
        restart: true

volumes:
  dawarich_shared:
